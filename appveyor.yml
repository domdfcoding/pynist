version: 1.0.{build}
clone_depth: 50  # The same depth Travis has
image: Visual Studio 2019

environment:
  matrix:
    # Python36
    - TOXENV: "py36-windows"
      PYTHON: "C:\\Python36"
      TOX_APPVEYOR_X64: 0
    # Python37
    - TOXENV: "py37-windows"
      PYTHON: "C:\\Python37"
      TOX_APPVEYOR_X64: 0
    # Python38
    - TOXENV: "py38-windows"
      PYTHON: "C:\\Python38"
      TOX_APPVEYOR_X64: 0
    # Python36-x64
    - TOXENV: "py36-windows"
      PYTHON: "C:\\Python36-x64"
      TOX_APPVEYOR_X64: 1
    # Python37-x64
    - TOXENV: "py37-windows"
      PYTHON: "C:\\Python37-x64"
      TOX_APPVEYOR_X64: 1
    # Python38-x64
    - TOXENV: "py38-windows"
      PYTHON: "C:\\Python38-x64"
      TOX_APPVEYOR_X64: 1

  pypi_password:
    secure: gjVIRU4iiSL61pXP6FoKsQ==

install:
  # We need wheel installed to build wheels
  - "%PYTHON%\\python.exe -m pip install wheel Cython tox tox-appveyor"

build: off

test_script:
  - "%PYTHON%\\python.exe -m tox"

after_test:
  - ".ci\\build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*.whl
    name: wheels

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

deploy_script:
  - ps: |
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying to PyPI...")
        &"${Env:PYTHON}/python.exe" -m pip install twine
        &"${Env:PYTHON}/python.exe" -m twine upload -u DomDF -p ${Env:pypi_password} --skip-existing dist/*.whl
      } else {
        Write-Output "No tag for deployment"
      }